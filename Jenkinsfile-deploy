def label = "dind-${UUID.randomUUID().toString()}"

properties(
  [
  parameters(
     [
     string(defaultValue: 'physics-workflow-operator', name: 'dockerimagename'),
     booleanParam(name: 'deploy_dev', defaultValue: ''),
     string(name: 'projectname', defaultValue: ''),
     string(name: 'version', defaultValue: ''),

     ]
    )
   ]
  )
  
podTemplate(label: label, namespace: 'dev', yaml: """
apiVersion: v1
kind: Pod
metadata:
  annotations:
    sidecar.istio.io/inject: "false"
spec:
  containers:
  - name: oc-client
    image: appuio/oc
    resources: 
      requests: 
        cpu: 1 
        memory: 2G 
    command:
    - cat
    tty: true
"""
) {

/* Slack notify integration */

def notifySlack = { String buildStatus ->
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#D4DADF'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    println "slackSend - ${msg}"
    //slackSend(color: color, message: msg)
}

node(label) {
  def project = "wp5"
  def dockerPhysics = "registry.apps.ocphub.physics-faas.eu"
  def registryPhysics = "https://registry.apps.ocphub.physics-faas.eu"
  checkout scm
     try {
        notifySlack('STARTED')

 stage('Deploy Orchestrator') {
    container('oc-client') {      
     configFileProvider(
        [configFile(fileId: 'jekins-devops-deploy', variable: 'CONFIG')]){
       def CTRL = sh returnStdout: true, script: "echo '${dockerPhysics}/${project}/${dockerimagename}:${version}'|tr -d '[:space:]'"
       env.controller = CTRL
       sh """
            kustomize version
            echo " controller = $controller"
            export KUBECONFIG=$CONFIG
            echo "${projectname}"
            echo "${version}"
            #apk update && apk add make
            #yum update -y
            yum install -y make wget 
            #yum install -y golang
            wget -q https://go.dev/dl/go1.18.1.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.18.1.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            #mkdir bin
            GOBIN=/home/jenkins/agent/workspace/physics-workflow-operator-DEPLOY/bin go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.7.0
            #cp $HOME/go/bin/controller-gen ./bin
            #pwd
            #ls -la
            # Install CRDs
            make install
            #kustomize build config/crd | kubectl apply -f -
            # Deploy Controller
            make deploy
            #cd config/manager && kustomize edit set image controller="$controller"
            ##kustomize edit set tag "${version}"
            #cd ../..
            #kustomize build config/default | kubectl apply -f -
          """
      }
     }
    }
}catch (e) {
        #sh """ 
        #  ls -la 
        #  ls -la bin
        #"""
        println "Failed to deploy - ${currentBuild.fullDisplayName}"
        notifySlack('UNSTABLE')
           }
 finally {
            // Success or failure, always send notifications
            notifySlack(currentBuild.result)
         }
 }
}
